name: CI/CD Workflow

on:
  # Trigger เมื่อ push ไปที่ develop หรือ main
  push:
    branches:
      - develop
      - main

  # Trigger เมื่อมี Pull Request มายัง develop
  pull_request:
    branches:
      - develop

env:
  APP_NAME: FarmGoods-Test
  DOCKERHUB_REPO: ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}

jobs:
  # --------------------------------------------------------------------------------
  # Job สำหรับ branch develop
  # - install dependencies
  # - run test (ถ้ามี)
  # - build dockerfile (ยังไม่ push)
  # --------------------------------------------------------------------------------
  test_and_build_develop:
    # เงื่อนไข: OR กันระหว่าง "push -> develop" และ "PR -> develop"
    if: >
      (github.event_name == 'push' && github.ref == 'refs/heads/develop')
      ||
      (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'develop')
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: npm install

      # หากไม่มี test จริง ๆ อาจใส่ || echo "No test found" เพื่อกัน fail
      - name: Run Tests
        run: npm test || echo "No test found, skip..."

      - name: Build Docker image
        run: docker build -t ${{ env.APP_NAME }}:develop .
        # (ยังไม่ push image ขึ้น Docker Hub ในขั้น develop)

  # --------------------------------------------------------------------------------
  # Job สำหรับ branch main
  # - build & push docker image
  # - auto generate tag & release (Github + DockerHub)
  # --------------------------------------------------------------------------------
  build_and_release_main:
    # เงื่อนไข: รันเฉพาะเวลามี push -> main (เช่น merge PR เข้า main)
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # 1) Login Docker Hub ด้วย secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 2) สร้างเวอร์ชัน (tag) อัตโนมัติ
      - name: Set Release Version
        id: versioning
        run: echo "VERSION=v1.${{ github.run_number }}" >> $GITHUB_OUTPUT

      # 3) Build & Push Docker Image ไปยัง Docker Hub
      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG="${{ steps.versioning.outputs.VERSION }}"
          IMAGE_NAME="${{ env.DOCKERHUB_REPO }}:${IMAGE_TAG}"

          echo "Docker Image Name: $IMAGE_NAME"

          # Build Docker
          docker build -t "$IMAGE_NAME" .

          # Push ขึ้น Docker Hub
          docker push "$IMAGE_NAME"

      # 4) สร้าง Release บน GitHub
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.versioning.outputs.VERSION }}
          release_name: "Release ${{ steps.versioning.outputs.VERSION }}"
          body: "Automatic release from GitHub Actions"
          draft: false
          prerelease: false
