name: CI/CD Workflow

on:
  push:
    branches:
      - develop
      - main

  pull_request:
    branches:
      - develop

env:
  APP_NAME: FarmGoods-Test

jobs:
  # --------------------------------------------------------------------------------
  # Job 1: สำหรับ branch develop
  # ทำการ install dependencies, run test , build docker (แต่ยังไม่ push)
  # --------------------------------------------------------------------------------
  test_and_build_develop:
    # เงื่อนไขให้ Run เฉพาะถ้าอยู่บน branch develop
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout โค้ดจาก branch develop
      - name: Check out code
        uses: actions/checkout@v3

      # 2) ติดตั้ง dependencies
      - name: Install dependencies
        run: npm install

      # 3) ทดสอบ (Unit Test / UAT )
      - name: Run Unit Tests
        run: npm test

      # 4) Build Docker image สำหรับทดสอบ (tag เป็น develop ไว้ก่อน)
      - name: Build Docker Image (Develop)
        run: docker build -f Dockerfile -t ${{ env.APP_NAME }}:develop .

  # --------------------------------------------------------------------------------
  # Job 2: สำหรับ branch main
  # ทำการ build & push docker image และสร้าง release/tag อัตโนมัติ
  # --------------------------------------------------------------------------------
  build_and_release_main:
    # เงื่อนไขให้ Run เฉพาะถ้าอยู่บน branch main
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout โค้ดจาก branch main
      - name: Check out code
        uses: actions/checkout@v3

      # 2) ล็อกอินเข้า Docker Hub (ต้องตั้งค่า secrets: DOCKER_USERNAME, DOCKER_PASSWORD)
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3) กำหนด Tag อัตโนมัติ (ตัวอย่าง: ใช้ version = v1.<run_number>)
      - name: Set Release Version
        id: versioning
        run: echo "VERSION=v1.${{ github.run_number }}" >> $GITHUB_OUTPUT

      # 4) Build & Push Docker Image ไปยัง Docker Hub
      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG="${{ steps.versioning.outputs.VERSION }}"
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${IMAGE_TAG}"

          echo "Docker Image Name: $IMAGE_NAME"

          # Build Docker
          docker build -f Dockerfile -t "${IMAGE_NAME}" .

          # Push ขึ้น Docker Hub
          docker push "${IMAGE_NAME}"

      # 5) สร้าง Release บน GitHub โดยใช้ version/tag จาก Step ก่อนหน้า
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.versioning.outputs.VERSION }}   # ใช้ค่า VERSION ที่เพิ่ง set
          release_name: "Release ${{ steps.versioning.outputs.VERSION }}"
          body: "Automatic release from GitHub Actions"
          draft: false
          prerelease: false
